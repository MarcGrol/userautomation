// Code generated by MockGen. DO NOT EDIT.
// Source: user_rule.go

// Package userrule is a generated GoMock package.
package userrule

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTriggerRuleExecution is a mock of TriggerRuleExecution interface.
type MockTriggerRuleExecution struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerRuleExecutionMockRecorder
}

// MockTriggerRuleExecutionMockRecorder is the mock recorder for MockTriggerRuleExecution.
type MockTriggerRuleExecutionMockRecorder struct {
	mock *MockTriggerRuleExecution
}

// NewMockTriggerRuleExecution creates a new mock instance.
func NewMockTriggerRuleExecution(ctrl *gomock.Controller) *MockTriggerRuleExecution {
	mock := &MockTriggerRuleExecution{ctrl: ctrl}
	mock.recorder = &MockTriggerRuleExecutionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerRuleExecution) EXPECT() *MockTriggerRuleExecutionMockRecorder {
	return m.recorder
}

// Trigger mocks base method.
func (m *MockTriggerRuleExecution) Trigger(ctx context.Context, rule Spec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trigger", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Trigger indicates an expected call of Trigger.
func (mr *MockTriggerRuleExecutionMockRecorder) Trigger(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trigger", reflect.TypeOf((*MockTriggerRuleExecution)(nil).Trigger), ctx, rule)
}
