// Code generated by MockGen. DO NOT EDIT.
// Source: rule.go

// Package rule is a generated GoMock package.
package rule

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRuleService is a mock of RuleService interface.
type MockRuleService struct {
	ctrl     *gomock.Controller
	recorder *MockRuleServiceMockRecorder
}

// MockRuleServiceMockRecorder is the mock recorder for MockRuleService.
type MockRuleServiceMockRecorder struct {
	mock *MockRuleService
}

// NewMockRuleService creates a new mock instance.
func NewMockRuleService(ctrl *gomock.Controller) *MockRuleService {
	mock := &MockRuleService{ctrl: ctrl}
	mock.recorder = &MockRuleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleService) EXPECT() *MockRuleServiceMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockRuleService) Put(ctx context.Context, segmentRule RuleSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, segmentRule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockRuleServiceMockRecorder) Put(ctx, segmentRule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRuleService)(nil).Put), ctx, segmentRule)
}

// Get mocks base method.
func (m *MockRuleService) Get(ctx context.Context, ruleUID string) (RuleSpec, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ruleUID)
	ret0, _ := ret[0].(RuleSpec)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockRuleServiceMockRecorder) Get(ctx, ruleUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRuleService)(nil).Get), ctx, ruleUID)
}

// Remove mocks base method.
func (m *MockRuleService) Remove(ctx context.Context, ruleUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, ruleUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRuleServiceMockRecorder) Remove(ctx, ruleUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRuleService)(nil).Remove), ctx, ruleUID)
}

// List mocks base method.
func (m *MockRuleService) List(ctx context.Context) ([]RuleSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]RuleSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRuleServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRuleService)(nil).List), ctx)
}

// MockTriggerRuleExecution is a mock of TriggerRuleExecution interface.
type MockTriggerRuleExecution struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerRuleExecutionMockRecorder
}

// MockTriggerRuleExecutionMockRecorder is the mock recorder for MockTriggerRuleExecution.
type MockTriggerRuleExecutionMockRecorder struct {
	mock *MockTriggerRuleExecution
}

// NewMockTriggerRuleExecution creates a new mock instance.
func NewMockTriggerRuleExecution(ctrl *gomock.Controller) *MockTriggerRuleExecution {
	mock := &MockTriggerRuleExecution{ctrl: ctrl}
	mock.recorder = &MockTriggerRuleExecutionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerRuleExecution) EXPECT() *MockTriggerRuleExecutionMockRecorder {
	return m.recorder
}

// Trigger mocks base method.
func (m *MockTriggerRuleExecution) Trigger(ctx context.Context, ruleUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trigger", ctx, ruleUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Trigger indicates an expected call of Trigger.
func (mr *MockTriggerRuleExecutionMockRecorder) Trigger(ctx, ruleUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trigger", reflect.TypeOf((*MockTriggerRuleExecution)(nil).Trigger), ctx, ruleUID)
}
