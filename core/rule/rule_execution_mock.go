// Code generated by MockGen. DO NOT EDIT.
// Source: rule.go

// Package rule is a generated GoMock package.
package rule

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSegmentRuleService is a mock of SegmentRuleService interface.
type MockSegmentRuleService struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentRuleServiceMockRecorder
}

// MockSegmentRuleServiceMockRecorder is the mock recorder for MockSegmentRuleService.
type MockSegmentRuleServiceMockRecorder struct {
	mock *MockSegmentRuleService
}

// NewMockSegmentRuleService creates a new mock instance.
func NewMockSegmentRuleService(ctrl *gomock.Controller) *MockSegmentRuleService {
	mock := &MockSegmentRuleService{ctrl: ctrl}
	mock.recorder = &MockSegmentRuleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentRuleService) EXPECT() *MockSegmentRuleServiceMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockSegmentRuleService) Put(ctx context.Context, segmentRule UserSegmentRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, segmentRule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockSegmentRuleServiceMockRecorder) Put(ctx, segmentRule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockSegmentRuleService)(nil).Put), ctx, segmentRule)
}

// Get mocks base method.
func (m *MockSegmentRuleService) Get(ctx context.Context, ruleUID string) (UserSegmentRule, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ruleUID)
	ret0, _ := ret[0].(UserSegmentRule)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockSegmentRuleServiceMockRecorder) Get(ctx, ruleUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSegmentRuleService)(nil).Get), ctx, ruleUID)
}

// Remove mocks base method.
func (m *MockSegmentRuleService) Remove(ctx context.Context, ruleUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, ruleUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSegmentRuleServiceMockRecorder) Remove(ctx, ruleUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSegmentRuleService)(nil).Remove), ctx, ruleUID)
}

// List mocks base method.
func (m *MockSegmentRuleService) List(ctx context.Context) ([]UserSegmentRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]UserSegmentRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSegmentRuleServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSegmentRuleService)(nil).List), ctx)
}

// MockSegmentRuleExecutionService is a mock of SegmentRuleExecutionService interface.
type MockSegmentRuleExecutionService struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentRuleExecutionServiceMockRecorder
}

// MockSegmentRuleExecutionServiceMockRecorder is the mock recorder for MockSegmentRuleExecutionService.
type MockSegmentRuleExecutionServiceMockRecorder struct {
	mock *MockSegmentRuleExecutionService
}

// NewMockSegmentRuleExecutionService creates a new mock instance.
func NewMockSegmentRuleExecutionService(ctrl *gomock.Controller) *MockSegmentRuleExecutionService {
	mock := &MockSegmentRuleExecutionService{ctrl: ctrl}
	mock.recorder = &MockSegmentRuleExecutionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentRuleExecutionService) EXPECT() *MockSegmentRuleExecutionServiceMockRecorder {
	return m.recorder
}

// Trigger mocks base method.
func (m *MockSegmentRuleExecutionService) Trigger(ctx context.Context, ruleUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trigger", ctx, ruleUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Trigger indicates an expected call of Trigger.
func (mr *MockSegmentRuleExecutionServiceMockRecorder) Trigger(ctx, ruleUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trigger", reflect.TypeOf((*MockSegmentRuleExecutionService)(nil).Trigger), ctx, ruleUID)
}
