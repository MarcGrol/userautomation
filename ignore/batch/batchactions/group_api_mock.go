// Code generated by MockGen. DO NOT EDIT.
// Source: group_api.go

// Package batchactions is a generated GoMock package.
package batchactions

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGroupAPI is a mock of GroupAPI interface.
type MockGroupAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGroupAPIMockRecorder
}

// MockGroupAPIMockRecorder is the mock recorder for MockGroupAPI.
type MockGroupAPIMockRecorder struct {
	mock *MockGroupAPI
}

// NewMockGroupAPI creates a new mock instance.
func NewMockGroupAPI(ctrl *gomock.Controller) *MockGroupAPI {
	mock := &MockGroupAPI{ctrl: ctrl}
	mock.recorder = &MockGroupAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupAPI) EXPECT() *MockGroupAPIMockRecorder {
	return m.recorder
}

// GroupExists mocks base method.
func (m *MockGroupAPI) GroupExists(c context.Context, groupUID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupExists", c, groupUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupExists indicates an expected call of GroupExists.
func (mr *MockGroupAPIMockRecorder) GroupExists(c, groupUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupExists", reflect.TypeOf((*MockGroupAPI)(nil).GroupExists), c, groupUID)
}

// AddUserToGroup mocks base method.
func (m *MockGroupAPI) AddUserToGroup(c context.Context, groupName, userUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", c, groupName, userUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockGroupAPIMockRecorder) AddUserToGroup(c, groupName, userUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockGroupAPI)(nil).AddUserToGroup), c, groupName, userUID)
}
